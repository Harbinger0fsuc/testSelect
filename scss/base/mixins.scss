/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
///
@mixin size($width: 100px, $height: $width) {
	width: $width;
	height: $height;
}

/// Creates a visual triangle. https://github.com/thoughtbot/bourbon/blob/v5.1.0/core/bourbon/library/_triangle.scss
/// Generates a triangle pointing in a specified direction.
///
/// @argument {string} $direction
///   The direction the triangle should point. Accepts `up`, `up-right`,
///   `right`, `down-right`, `down`, `down-left`, `left` or `up-left`.
///
/// @argument {number (with unit)} $width
///   Width of the triangle.
///
/// @argument {number (with unit)} $height
///   Height of the triangle.
///
/// @argument {color} $color
///   Color of the triangle.
///
/// @example scss
///   .element {
///     &::before {
///       @include triangle("up", 2rem, 1rem, #b25c9c);
///       content: "";
///     }
///   }
///
///   // CSS Output
///   .element::before {
///     border-style: solid;
///     height: 0;
///     width: 0;
///     border-color: transparent transparent #b25c9c;
///     border-width: 0 1rem 1rem;
///     content: "";
///   }

@mixin triangle($direction, $width, $height, $color) {
	@if not
		index(
			"up" "up-right" "right" "down-right" "down" "down-left" "left" "up-left",
			$direction
		) {
		@error "Direction must be `up`, `up-right`, `right`, `down-right`, " +
			"`down`, `down-left`, `left` or `up-left`.";
	} @else if not _is-color($color) {
		@error "`#{$color}` is not a valid color for the `$color` argument in " +
			"the `triangle` mixin.";
	} @else {
		width: 0;
		height: 0;
		border-style: solid;

		@if $direction == "up" {
			border-color: transparent transparent $color;
			border-width: 0 ($width / 2) $height;
		} @else if $direction == "up-right" {
			border-color: transparent $color transparent transparent;
			border-width: 0 $width $width 0;
		} @else if $direction == "right" {
			border-color: transparent transparent transparent $color;
			border-width: ($height / 2) 0 ($height / 2) $width;
		} @else if $direction == "down-right" {
			border-color: transparent transparent $color;
			border-width: 0 0 $width $width;
		} @else if $direction == "down" {
			border-color: $color transparent transparent;
			border-width: $height ($width / 2) 0;
		} @else if $direction == "down-left" {
			border-color: transparent transparent transparent $color;
			border-width: $width 0 0 $width;
		} @else if $direction == "left" {
			border-color: transparent $color transparent transparent;
			border-width: ($height / 2) $width ($height / 2) 0;
		} @else if $direction == "up-left" {
			border-color: $color transparent transparent;
			border-width: $width $width 0 0;
		}
	}
}

//------------------------- Placeholder mixin
@mixin optional-at-root($sel) {
	@at-root #{if(not &, $sel, selector-append(&, $sel))} {
		@content;
	}
}

@mixin placeholder {
	@include optional-at-root("::-webkit-input-placeholder") {
		@content;
	}

	@include optional-at-root(":-moz-placeholder") {
		@content;
	}

	@include optional-at-root("::-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":-ms-input-placeholder") {
		@content;
	}
}

//how to use
// .foo {
// 	@include placeholder {
// 		color: green;
// 	}
// }

//------------------------- mixin responsive-ratio with round off
@mixin ar($x: 16, $y: 9) {
	@extend %ar;

	&::before {
		padding-top: $var-aspect-ratio-round * 100%;
		$var-aspect-ratio: ($y / $x);
		$var-aspect-ratio-round: round($var-aspect-ratio * 10000) / 10000;
	}
}

%ar {
	position: relative;
	overflow: hidden;

	&::before {
		display: block;
		width: 100%;
		padding-top: 56.25%;
		content: "";
	}
}

//how to use see https://codepen.io/sharnirio/pen/ZEOQvmb
//div {@include ar(16,9);} or div {@include ar(200px,400px);}

//------------------------- Mixin for vertical indentation
@mixin liY($value: 15px) {
	&:nth-child(n + 2) {
		margin-top: $value;
	}
}

//how to use
// ul>li {@include liY(20px)}

//------------------------- Mixin for horizontal indentation
@mixin liX($value: 15px) {
	&:nth-child(n + 2) {
		margin-left: $value;
	}
}

//how to use
// ul>li {@include liX(20px}

//------------------------- Mixin to stretch an image
//------------------------- Usage: @include bg-stretch-img;
//------------------------- Variations 1: @include bg-stretch-img($hasImgChild: false);
//------------------------- Variations 1: To stretch an element that doesn't have a child img element
//------------------------- Variations 2: @include bg-stretch-img(50%, initial, initial, 50%, -50%, -50%, true);
//------------------------- Variations 2: fix the chrome bug;
//------------------------- Variations 3: @include bg-stretch-img(50%, initial, initial, 50%, -50%, -50%, false);
//------------------------- Variations 3: To stretch a video properly fixing the video's placement in some browsers (Chrome, IE);
@mixin bg-stretch-img(
	$top: 0,
	$right: 0,
	$bottom: 0,
	$left: 0,
	$translateX: 0,
	$translateY: 0,
	$hasImgChild: true
) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	width: 100%;
	max-width: none;
	height: 100%;
	object-fit: cover;
	transform: translate($translateX, $translateY);

	@if ($hasImgChild) {
		img {
			display: block;
			width: 100%;
			height: 100%;
			object-fit: cover;
		}
	}
}

//------------------------- Mixin for round links
//------------------------- Usage: @include roundLink;
//------------------------- Variations 1: @include roundLink($width: 30px, $height: 30px, $bg-color: red);
@mixin roundLink(
	$display: flex,
	$width: 50px,
	$height: 50px,
	$border: none,
	$radius: 50%,
	$bg-color: white
) {
	@if $display == flex {
		display: flex;
		align-items: center;
		justify-content: center;
	} @else {
		display: table;
		text-align: center;

		> * {
			display: table-cell;
			vertical-align: middle;
		}
	}

	width: $width;
	height: $height;
	padding: $width / 5;
	background-color: $bg-color;
	border: $border;
	border-radius: $radius;
}

//------------------------- Mixin for background image
//------------------------- Usage: @include backgroundImage($url: "../img/someImg.jpg");
@mixin backgroundImage(
	$fallBackColor: coral,
	$url: "",
	$repeat: no-repeat,
	$pos: center,
	$size: cover
) {
	background: $fallBackColor url(unquote($url)) $repeat $pos;
	background-size: $size;
}

//------------------------- Mixin to add basic styles for headings
@mixin h {
	h1,
	.h1,
	h2,
	.h2,
	h3,
	.h3,
	h4,
	.h4,
	h5,
	.h5,
	h6,
	.h6,
	.h {
		@content;
	}
}

//------------------------- Mixin to add basic margin-bottom to a vertical block`s elements.
@mixin generalVertSpacing($spacing: 2rem) {
	display: flex;
	flex-direction: column;

	& > * {
		margin-bottom: $spacing;

		&:last-child {
			margin-bottom: 0;
		}
	}
}

//------------------------- Focus visible
@mixin focus-visible {
	@if (&) {
		.js-focus-visible &:focus:not(.focus-visible) {
			@content;
		}
	}

	@else {
		.js-focus-visible :focus:not(.focus-visible) {
			outline: none;
		}
	}
}
